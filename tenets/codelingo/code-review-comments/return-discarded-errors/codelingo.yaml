specs:
  - name: return-discarded-errors
    vars:
      returnError: |
        if err != nil {
          return {{ zeroValues(args) }}
        }
    actions:
      codelingo/review:
        comment: Don't discard errors.
      codelingo/rewrite:
        place: holder
    query: |
      import codelingo/ast/go

      go.func_decl(depth = any):
        go.func_type:
          @place holder
          go.field_list:
            raw as args
            sibling_order == 1
        @rewrite --line --append "{{returnError}}"
        @review comment
        go.assign_stmt(depth = any):
          go.lhs:
            @rewrite "err"
            go.ident:
              name == "_"
              type == "error"
funcs:
  - name: zeroValues
    type: resolver
    body: |
      function (args) {
        if (args[0] == "(") {
            args = args.slice(1)
        }

        if (args[args.length-1] == ")") {
            args = args.slice(0, -1)
        }

        return args.split(", ").map(function(param){
          switch(param) {
            case "string":
              return "\"\""
            case "int", "int32", "int64", "float", "float32", "float64":
              return "0"
            case "bool":
              return "false"
            case "error":
              return "err"
            default:
              if (param.indexOf("*") != -1) {
                return "nil"
              }
              return param + "{}"
          }
        }).join(", ")
      }

