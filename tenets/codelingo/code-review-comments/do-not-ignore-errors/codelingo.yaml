specs:
  - name: do-not-ignore-errors
    actions:
      codelingo/rewrite:
        errorHandler: place holder
      codelingo/docs:
        title: Do Not Ignore Errors
        body: |
          Do not ignore errors. If a function returns an error, check it to make sure the function succeeded. Handle the error, return it, or, in truly exceptional situations, panic.
      codelingo/review:
        comment: |
          If a function returns an error, check it to make sure the function succeeded. rac {{ returnArgCount }} ep {{ errorPosition }}From [Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments#handle-errors).
    query: |
      import codelingo/ast/go

      go.block_stmt(depth = any): # The call expression is a child of block_stmt without any intervening facts, such as go.assign_stmt.
        go.list:
          go.expr_stmt:
            @review comment
            @rewrite --replace "{{ HandleError(returnArgCount, errorPosition, callExpr) }}"
            go.call_expr:
              raw as callExpr
              edge("calls"):
                go.func_decl:
                  go.func_type:
                    go.field_list
                    go.field_list:
                      child_count as returnArgCount
                      go.field:
                        sibling_order as errorPosition
                        go.ident:
                          name == "error"
funcs:
  - name: HandleError
    type: resolver
    body: |
      function (returnArgCount, errorPosition, callExpr) {
        var handler = "\t"
        for (pos = 0; pos < returnArgCount; pos++) {
          handler += (pos == errorPosition ? "err": "_")
          handler += (pos == returnArgCount - 1 ? " := " : " , ")
        }

        handler += callExpr
        handler += "\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}"
        return handler
      }