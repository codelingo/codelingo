funcs:
  - name: isLong
    type: asserter
    body: |
      function(varName) {
        return varName.length > 1 
      }
  - name: isLimitedScope
    type: asserter
    body: |
      function(childCount) {
        return childCount <= 10 // This is an approximate; we assume if the number of children of a block is less equal than 10, it is a short one
      }
specs:
  - name:  short-name-limited-scope
    actions:
      codelingo/review:
        comment: Local variable "{{varName}}" with a limited scope (less than 10 lines) should be short rather than long [as specified in Code Review Comments](https://github.com/codelingo/codelingo/blob/master/tenets/codelingo/code-review-comments/FULL_TEXT.md#variable-names)
      codelingo/docs:
        title: Short Name Limited Scope
        body: |    
          Variable names in Go should be short rather than long. This is especially true for local variables with limited scope. 
      

    query: |
      import codelingo/ast/go
     
      go.block_stmt(depth = any):
        go.list:
          child_count as childCount
          isLimitedScope(childCount)
          any_of:
            @review comment
            go.assign_stmt(depth = any):
              tok == ":="
              go.lhs:
                go.ident:
                  name as varName
                  isLong(varName)
            @review comment
            go.decl_stmt(depth = any):
              go.gen_decl:
                go.value_spec:
                  go.names:
                    go.ident:
                      name as varName
                      isLong(varName)
