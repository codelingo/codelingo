funcs:
  - name: fixSliceType
    type: resolver
    body: |
      function(sliceType) {
        sliceType = sliceType.split(' ').join('');
        // This check is for empty interface or struct, which include `{}` as part of their type definition
        if (sliceType.substring(sliceType.length - 4, sliceType.length) == "{}{}" && (sliceType.indexOf("interface") !== 0 || sliceType.indexOf("struct") !== 0)) 
            return sliceType.substring(0, sliceType.indexOf("{")) + "{}"
        return sliceType.substring(0, sliceType.indexOf("{"))
      }

specs:
  - name:  declare-empty-slice
    actions:
      codelingo/review:
        comment: Declare {{sliceName}} as a nil slice, with `var {{sliceName}} {{fixSliceType(sliceType)}} [as specified in Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments#declaring-empty-slices)
      codelingo/rewrite:
      codelingo/docs:
        title: Declaring Empty Slices
        body: |
          When declaring an empty slice, prefer

          ```go
          var t []string
          ```

          over

          ```go
          t := []string{}
          ```

          The former declares a nil slice value, while the latter is non-nil but zero-length. They are functionally equivalent-their `len` and `cap` are both zero `tbut the nil slice is the preferred style.

          Note that there are limited circumstances where a non-nil but zero-length slice is preferred, such as when encoding JSON objects (a `nil` slice encodes to `null`, while `[]string{}` encodes to the JSON array `[]`).

          When designing interfaces, avoid making a distinction between a nil slice and a non-nil, zero-length slice, as this can lead to subtle programming errors.

          For more discussion about nil in Go see Francesc Campoy's talk [Understanding Nil](https://www.youtube.com/watch?v=ynoY2xz-F8s).
    query: |
      import codelingo/ast/go

      @review comment
      @rewrite --replace "var {{sliceName}} {{fixSliceType(sliceType)}}"
      go.assign_stmt(depth = any):
        tok == ":="
        go.lhs:
          go.ident:
            name as sliceName
        go.rhs:
          raw as sliceType
          start_offset
          end_offset
          go.composite_lit:
            child_count == 1
            go.array_type
