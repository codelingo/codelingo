funcs:
  - name: importNamesEqual
    type: asserter
    body: |
      function(a, b) {
        var aSplit = a.toLowerCase().split("/")
        var bSplit = b.toLowerCase().split("/")
        return a[a.length - 1] === b[b.length - 1]
      }
  - name: neq
    type: asserter
    body: |
      function(a, b) {
        return a !== b
      }
tenets:
  - name: avoid-renaming-imports
    flows:
      codelingo/docs:
        title: Avoid Renaming Imports
        body: |
          Avoid renaming imports except to avoid a name collision; good package names
          should not require renaming. In the event of collision, prefer to rename the
          most local or project-specific import.
      codelingo/review:
        comment: |
          This import is renamed to `{{importName}}` but this is a bad practice. 
          Import without specifying a new name.
    query: |
      import codelingo/ast/go

      go.gen_decl(depth = any):
        @review comment
        go.import_spec:
          start_offset as soOne # stand in for UID
          go.ident: # Ident is the rename and absent if not named
            name as importName
            name != "_"
          go.basic_lit: # Basic_lit is the "import/path"
            value as importOne
        exclude:
          go.import_spec:
            start_offset as soTwo
            neq(soOne, soTwo)
            go.basic_lit:
              value as importTwo
              importNamesEqual(importOne, importTwo)