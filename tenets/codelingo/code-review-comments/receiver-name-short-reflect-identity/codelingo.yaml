funcs:
  - name: isNotAbbr
    type: asserter
    body: |
      function(receiverName, typeName) {
        rc = receiverName.toLowerCase()
        tn = typeName.toLowerCase()
        if(rc.length > 2) 
          return true
        for (i = 0; i < rc.length; i++) {
          if(tn.indexOf(rc[i]) === -1)
            return true
        }
        return false
      }

specs:
  - name:  receiver-name-short-reflect-identity
    actions:
      codelingo/review:
        comment: The name of a method's receiver "{{receiverName}}" should be short and also a reflection of its identity "{{typeName}}" [as specified in Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments#receiver-names)
      codelingo/docs:
        title: Method's receiver name 
        body: |
          The name of a method's receiver should be a reflection of its identity; often a one or two letter 
          abbreviation of its type suffices (such as "c" or "cl" for "Client"). Don't use generic names such as 
          "me", "this" or "self", identifiers typical of object-oriented languages that gives the method a 
          special meaning. In Go, the receiver of a method is just another parameter and therefore, should 
          be named accordingly. The name need not be as descriptive as that of a method argument, as its 
          role is obvious and serves no documentary purpose. It can be very short as it will appear on 
          almost every line of every method of the type; familiarity admits brevity. 

    query: |
      import codelingo/ast/go
      
      go.func_decl(depth = any):
        @review comment
        go.field_list:
          go.field:
            go.names:
              go.ident:
                name as receiverName
            any_of:
              go.ident:
                name as typeName
                isNotAbbr(receiverName,typeName)
              go.star_expr:
                go.ident:
                  name as typeName
                  isNotAbbr(receiverName,typeName)

