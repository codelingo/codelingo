funcs:
  - name: isKind
    type: asserter
    body: |
      function (a) {
        return a.match(/^`json:.*,name=kind\"`$/)
      }
  - name: isNamespace
    type: asserter
    body: |
      function (a) {
        return a.match(/^`json:.*,name=namespace\"`$/)
      }
  - name: isName
    type: asserter
    body: |
      function (a) {
        return a.match(/^`json:.*,name=name\"`$/)
      }
tenets:
  - name: jsonapi-kind-compulsory-metadata
    flows:
      codelingo/docs:
        title: JSON API kind compulsory metadata
        body: |
          Every object kind must provide a nested object field called 'metadata' that contains both a 'namespace' and a 'name' field.
      codelingo/review:
        comment: This object kind has not provided a nested object field called 'metadata' containing a 'namespace' and a 'name' field.
    query: |
      import codelingo/ast/go

      go.decls:
        go.gen_decl:
          go.type_spec:
            @review comment
            go.struct_type:
              go.field_list:
                go.field:
                  go.names:
                    go.ident:
                      type == "string"
                  go.ident:
                    name == "string"
                  go.basic_lit:
                    kind == "string"
                    value as propAValue
                    isKind(propAValue)
                exclude:
                  go.field:
                    go.names:
                      go.ident:
                        type == "string"
                    go.ident:
                      name == "string"
                    go.basic_lit:
                      kind == "string"
                      value as propBValue
                      isName(propBValue)
                  go.field:
                    go.basic_lit:
                      kind == "string"
                      value as propCValue
                      isNamespace(propCValue)
