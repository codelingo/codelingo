tenets:
- name: unmanaged-goroutine-in-worker
  actions:
    codelingo/docs:
      title: Unmanaged goroutine in worker
      body: |
        Implementations of worker.Worker should guarantee that they're no longer doing work or
        consuming resources once Wait returns.
        
        Starting a goroutine directly makes it much harder to fulfil this requirement; consider
        using Tomb.Go or Catacomb.Add (with NewSimpleWorker) to ensure that all work is completed
        and all errors are handled. (Constructs from package sync may also serve, but they are
        harder to verify correct, especially as code evolves, and are therefore not preferred.)
    codelingo/review:
      comment: |
        {{packageName}}.{{typeName}} is a worker.Worker which starts an unmanaged goroutine.
  query: |
    import codelingo/ast/gotypes

    gotypes.package:
      name as packageName
      gotypes.named:
        name as typeName

        # Kill and Wait to identify Worker.
        gotypes.method:
          edge("reference"):
            gotypes.func:
              name == "Kill"
        gotypes.method:
          edge("reference"):
            gotypes.func:
              name == "Wait"

        # Any method that directly invokes a goroutine.
        gotypes.method:
          edge("reference"):
            gotypes.func:
              edge("link"):
                gotypes.func_decl:
                  @review comment
                  gotypes.go_stmt(depth=any)
