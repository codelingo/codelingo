funcs:
  - name: appendIntegrationTest
    type: resolver
    body: |
      function (fname) {
        fname.replace(/\.go$/, "")
        fname.replace(/_test$/, "")
        return fname + "_integration_test.go"
      }
  - name: doesNotMatch
    type: asserter
    body: |
      function (reg, str) {
        return !str.match(reg)
      }
tenets:
  - name: struct-passed-but-barely-used
    vars:
      pName: "{{ protoName(literalValue) }}"
    flows:
      codelingo/rewrite:
      codelingo/docs:
        title: Struct Passed but Barely Used
        body: |
          Also, think about what you really depend on. If you just *use* some
          resource, accept that `Resource` directly, and don't muck about with
          `ResourceFactory` or `NewResourceFunc` unless you really *need* to defer
          that logic. SRP, remember -- unless resource creation is fundamental to
          what you're doing, it's best to let someone else handle it.
      codelingo/review:
        comment: This struct is passed in, but only 1 attribute of it is used. Pass in the attribute rather than the struct.
    query: |
      import codelingo/ast/go
      
      # TODO Write query. This is a stub query.
      @rewrite name
      @review comment
      go.ident
