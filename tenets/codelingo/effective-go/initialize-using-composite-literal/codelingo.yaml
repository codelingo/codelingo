specs:
  - name:  initialize-using-composite-literal
    actions:
      codelingo/docs:
        title: Initialize instance using composite literal
        body: |
          Sometimes the zero value isn't good enough and an initializing constructor is necessary. We can simplify the code using a composite literal, which is an expression that creates a new instance each time it is evaluated.
      codelingo/review:
        comment: Initialize {{varName}} using a composite literal to simplify the code. [as specified in Effective Go](https://golang.org/doc/effective_go.html#composite_literals)
    query: |
      import codelingo/ast/go
      
      go.element(depth = any):
        go.assign_stmt:
          tok == ":="
          go.lhs:
            go.ident:
              name as varName
          go.rhs:
            go.call_expr:
              go.ident:
                name == "new"
        @review comment
        go.assign_stmt(depth=any):
          tok == "="
          go.lhs:
            go.selector_expr:
              go.ident:
                name == varName
