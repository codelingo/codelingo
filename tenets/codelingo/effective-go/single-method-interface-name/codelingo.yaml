funcs:
  - name: isBadName
    type: asserter
    body: |
      function(ifName, methodName) {
        return methodName.toLowerCase() !== ifName.toLowerCase().substring(0, methodName.length)
      }
tenets:
  - name: single-method-interface-name
    flows:
      codelingo/docs:
        title: Single Method Interface Name
        body: |
          By convention, one-method interfaces are named by the method name plus an -er suffix 
          or similar modification to construct an agent noun: Reader, Writer, Formatter, CloseNotifier etc.

          There are a number of such names and it's productive to honor them and the function names they capture. 
          Read, Write, Close, Flush, String and so on have canonical signatures and meanings. To avoid confusion, 
          don't give your method one of those names unless it has the same signature and meaning. Conversely, 
          if your type implements a method with the same meaning as a method on a well-known type, give it the 
          same name and signature; call your string-converter method String not ToString.
      codelingo/review:
        comment: |
          If an interface contains only one method, the method name should appear 
          at the beginning of the interface name. Eg. interface "Reader" with method "Read()"
    query: |
      import codelingo/ast/go
      
      go.gen_decl(depth = any):
        go.type_spec:
          go.ident:
            name as ifName
          @review comment
          go.interface_type:
            go.field_list:
              child_count == 1
              go.field:
                go.names:
                  go.ident:
                    name as methodName
                    isBadName(ifName, methodName)


