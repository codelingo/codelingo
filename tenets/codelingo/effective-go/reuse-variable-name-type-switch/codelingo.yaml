funcs:
  - name: notEqual
    type: asserter
    body: |
      function(name1, name2) {
        return name1 != name2
      }

specs:
  - name: reuse-variable-name-type-switch
    actions:
      codelingo/docs:
        title: Reuse the variable name in a type switch
        body: |
          If the switch declares a variable in the expression, the variable will have the corresponding type in each clause. It's also idiomatic to reuse the name in such cases, in effect declaring a new variable with the same name but a different type in each case.
      codelingo/review:
        comment: Reuse `{{varName2}}` instead of a new variable `{{varName1}}` in the type switch. [as specified in Effective Go](https://golang.org/doc/effective_go.html#type_switch) 
      codelingo/rewrite:
    query: |
      import codelingo/ast/go
      
      @review comment
      go.type_switch_stmt(depth = any):
        go.assign_stmt:
          go.lhs: 
            go.ident:
              name as varName1
          go.rhs:
            go.type_assert_expr:
              go.ident:
                name as varName2
                notEqual(varName1, varName2)
