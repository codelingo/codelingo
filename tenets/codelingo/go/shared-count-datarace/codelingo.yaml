specs:
  - name: shared-count-datarace
    actions:
      codelingo/review:
        comment: Goroutines created in for loops that use the iterator of the loop internally should instead use a copy made at the time of the goroutines creation by passing it as an argument.
    query: |
      import codelingo/ast/go

      go.func_decl(depth = any):
        go.assign_stmt(depth = any):
          go.lhs:
            go.ident:
              name as wgName
          go.rhs:
            go.ident(depth = any):
              name == "WaitGroup"
        any_of:
          @review comment
          go.for_stmt(depth = any):
            go.binary_expr:
              go.ident:
                name as countName
            go.inc_dec_stmt:
              go.ident:
                name == countName
            exclude:
              go.assign_stmt(depth = any):
                go.lhs:
                  go.ident:
                    name == "i"
                go.rhs:
                  go.ident:
                    name == "i"
              go.call_expr(depth = any):
                go.selector_expr:
                  go.ident:
                    name == wgName
                  go.ident:
                    name == "Add"
            go.go_stmt(depth = any):
              go.call_expr:
                go.func_lit:
                  exclude:
                    go.func_type:
                      go.field_list:
                        go.field
                  go.ident(depth = any):
                    name == countName
          @review comment
          go.range_stmt(depth = any):
            go.ident:
              name as countName
            go.go_stmt(depth = any):
              go.call_expr:
                go.func_lit:
                  exclude:
                    go.func_type:
                      go.field_list:
                        go.field
                  go.ident(depth = any):
                    name == countName

