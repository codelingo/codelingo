funcs:
- name: append
  type: resolver
  body: |
    function (a, b) {
      return a + b
    }
- name: appendIntegrationTest
  type: resolver
  body: |
    function (fname) {
      fname.replace(/\.go$/, "")
      fname.replace(/_test$/, "")
      return fname + "_integration_test.go"
    }
- name: doesNotMatch
  type: asserter
  body: |
    function (reg, str) {
      return !str.match(reg)
    }
tenets:
  # Tenets that ensure integration tests have the correct package name, file name,
  # and custom build directive as per https://github.com/jenkins-x/jx/blob/master/docs/contributing/hacking.md#integration-tests.

  # There is a test file for each possible combination of having the directive (D),
  # correct package name (P), and correct filename (F). Every combination except
  # DPF and OOO will be matched by two tenets. For example, DOO will be matched by
  # right-build-directive-wrong-file and right-build-directive-wrong-package,
  #  and OPF will be matched by right-package-wrong-build-directive and 
  # right-file-wrong-build-directive.
  # This gives a total of 12 issues.

  # Caveat: we don't test that the test package name is `<pkgname>_test`, we just test
  # that it ends in `_test`. Similarly we don't test that the test file name is
  # `<pkgname>_integration_test.go`, we just test that it ends in `integration_test.go`.

  # There is an explicit tenet for each case. See more concise possible solutions below.
  - name: right-build-directive-wrong-file
    flows:
      codelingo/rewrite:
        name: filler # non-empty rewrite section required for parse error
      codelingo/docs:
        title: Append
        body: |
          Integration tests should have the custom build directive `// +build integration`,
          belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
      codelingo/review:
        comment: |
          right-build-directive-wrong-file
          Integration tests should have the custom build directive `// +build integration`,
          belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
    query: |
      import codelingo/ast/go

      go.dir(depth = any):
        go.file(depth = 0:2):
          go.ident:
            name as packageName
            doesNotMatch(/test/, packageName)
        @review comment
        go.file:
          go.comment_group:
            go.comment:
              start_offset == 0
              text == "// +build integration"
          @rewrite "{{ appendIntegrationTest(fname) }}""
          @var fname
          filename as fname
          doesNotMatch(/_integration_test.go/, fname)
          # filename != append("packageName", "_integration_test.go")

  - name: right-build-directive-wrong-package
    flows:
      codelingo/rewrite:
        name: |
          {{name}}_test
      codelingo/docs:
        title: Right Build Directive Wrong Package
        body:
          Integration tests should have the custom build directive `// +build integration`,
          belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
      codelingo/review:
        comment: |
          right-build-directive-wrong-package
          Integration tests should have the custom build directive `// +build integration`,
          belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
    query: |
      import codelingo/ast/go

      go.dir(depth = any):
        go.file(depth = 0:2):
          @rewrite --replace name
          go.ident:
            @var name
            name as packageName
            doesNotMatch(/test/, packageName)
        # @review comment
        go.file:
          go.comment_group:
            go.comment:
              start_offset == 0
              text == "// +build integration"
          # The only top level ident in a go file is (should be) the package name
          @review comment
          go.ident(depth = 0:2):
            name as testPackageName
            doesNotMatch(/_test/, testPackageName)
            # name != append(packageName, "_test")

  - name: right-package-wrong-build-directive
    flows:
      codelingo/rewrite:
        name: filler # non-empty rewrite section required for parse error
      codelingo/docs:
        title: Right Package Wrong Build Directive
        body:
          Integration tests should have the custom build directive `// +build integration`,
          belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
      codelingo/review:
        comment: |
          right-package-wrong-build-directive
          Integration tests should have the custom build directive `// +build integration`,
          belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
    query: |
      import codelingo/ast/go

      go.dir(depth = any):
        go.file(depth = 0:2):
          go.ident:
            name as packageName
            doesNotMatch(/test/, packageName)
        @review comment
        go.file:
          # The only top level ident in a go file is (should be) the package name
          @rewrite --prepend "// +build integration"
          go.ident:
            name == append(packageName, "_test")
          exclude:
            go.comment_group:
              go.comment:
                start_offset == 0
                text == "// +build integration"

  - name: right-package-wrong-file
    flows:
      codelingo/rewrite:
        name: filler # non-empty rewrite section required for parse error
      codelingo/docs:
        title: Right Package Wrong File
        body:
          Integration tests should have the custom build directive `// +build integration`,
          belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
      codelingo/review:
        comment: |
          right-package-wrong-file
          Integration tests should have the custom build directive `// +build integration`,
          belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
    query: |
      import codelingo/ast/go

      go.dir(depth = any):
        go.file(depth = 0:2):
          go.ident:
            name as packageName
            doesNotMatch(/test/, packageName)
        @review comment
        go.file:
          # The only top level ident in a go file is (should be) the package name
          go.ident:
            name == append(packageName, "_test")
          @rewrite "{{ appendIntegrationTest(fname) }}""
          @var fname
          filename as fname
          doesNotMatch(/_integration_test.go/, fname)
          # filename != append(packageName, "_integration_test.go")

  - name: right-file-wrong-build-directive
    flows:
      codelingo/rewrite:
        name: filler # non-empty rewrite section required for parse error
      codelingo/docs:
        title: Right File Wrong Build Directive
        body:
          Integration tests should have the custom build directive `// +build integration`,
          belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
      codelingo/review:
        comment: |
          right-file-wrong-build-directive
          Integration tests should have the custom build directive `// +build integration`,
          belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
    query: |
      import codelingo/ast/go

      go.dir(depth = any):
        go.file(depth = 0:2):
          go.ident:
            name as packageName
            doesNotMatch(/test/, packageName)
        @review comment
        go.file:
          @rewrite --prepend "// +build integration"
          go.ident
          filename as fname
          regex(/integration_test.go/, fname)
          # filename == append(packageName, "integration_test.go")
          exclude:
            go.comment_group:
              go.comment:
                start_offset == 0
                text == "// +build integration"

  - name: right-file-wrong-package
    flows:
      codelingo/rewrite:
        name: |
          {{name}}_test
      codelingo/docs:
        title: Right File Wrong Package
        body:
          Integration tests should have the custom build directive `// +build integration`,
          belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
      codelingo/review:
        comment: |
          right-file-wrong-package
          Integration tests should have the custom build directive `// +build integration`,
          belong to a file called `.*_integration_test.go`, and a a package called `<packagename>_test`
    query: |
      import codelingo/ast/go

      go.dir(depth = any):
        go.file(depth = 0:2):
          @rewrite --replace name
          go.ident:
            @var name
            name as packageName
            doesNotMatch(/test/, packageName)
        @review comment
        go.file:
          filename as fname
          regex(/integration_test.go/, fname)
          # filename == append(packageName, "integration_test.go")
          exclude:
            # The only top level ident in a go file is (should be) the package name
            go.ident:
              name as testPackagename
              regex(/_test/, testPackagename)
              # name == append(packageName, "_test")

## Better solutions:
# Match files that have at least one of the three characteristics of an integration
# test and are also missing at least one.
# Failing due to "hit a uncaught error: got 0 results expecting 1 for block h, fact "common.comment_group"

# @review comment
# go.file(depth = any):
#   any_of:
#     filename as fname
#     filename == append(packageName, "integration_test.go")
#     go.comment_group:
#       go.comment:
#         start_offset == 0
#         text == "// +build integration"
#     # The only top level ident in a go file is (should be) the package name
#     go.ident:
#       name as testPackageName
#       name == append(packageName, "_test")
#   exclude:
#     # TODO: with fragment for fully repeated code
#     any_of:
#       filename as fname
#       regex(/.*_test.go, fname/)
#       go.comment_group:
#         go.comment:
#           start_offset == 0
#           text == "// +build integration"
#       # The only top level ident in a go file is (should be) the package name
#       go.ident:
#         name as testPackageName
#       name == append(packageName, "_test")

# Match a file that has one or two of the three charateristics of integration tests
# Not implemented
# @review comment
# go.file(depth = any):
#   1:2_of:
#     filename as fname
#     filename == append(packageName, "integration_test.go")
#     go.comment_group:
#       go.comment:
#         start_offset == 0
#         text == "// +build integration"
#     # The only top level ident in a go file is (should be) the package name
#     go.ident:
#       name as testPackageName
#       name == append(packageName, "_test")
