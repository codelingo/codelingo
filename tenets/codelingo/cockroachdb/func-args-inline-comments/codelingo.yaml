funcs:
  - name: isNotCommented
    type: asserter
    body: |
      function(identOffset, commentOffset) {
        return 
      }
tenets:
  - name: func-args-inline-comments
    flows:
      codelingo/docs:
        title: Function Arguments Inline Comments
        body: |
          A code reader encountering a function call should be able to 
          intuit what all the arguments to the call represent. Whenever
          it wouldn't be otherwise clear what the value used as an argument
          represents (for example, from the variable's name if a variable
          is used or from the type name if a struct literal is used), 
          consider annotating it with an inline comment specifying the
          respective parameter's name. Particularly, consider doing this
          for literals of "basic" types (boolean, numeric, string types,
          whether the type is predeclared or not) and for nil identifiers, 
          as they are frequently not suggestive enough of what they represent.
      codelingo/review:
        comment: Consider adding an inline comment specifying the
          respective parameter's name. Particularly, consider doing this
          for literals of "basic" types
    query: |

      import codelingo/ast/go

      # This tenet is not working
      # Need to be able to query 'line'

      go.file(depth = any):
        go.call_expr(depth = any):
          go.args:
            @review comment
            go.ident(depth = any):
              name == "nil"
              start_line as line       
      go.comment_group(depth = any):
        go.comment:
          start_line == line