tenets:
  - name: freed-new-object
    doc: Finds objects that were created with new and freed.
    flows:
      codelingo/review:
        comment: This was created with new, and should be deleted not freed.
    query: |
      import codelingo/ast/cpp

      cpp.block:
        cpp.assignment_statement(depth = any):
          cpp.lhs:
            cpp.variable:
              cpp.identifier_name:
                identifier_token as varName
          cpp.rhs:
            cpp.new_keyword
        @ review.comment
        cpp.free_statement:
          cpp.variable:
            cpp.identifier_name:
              identifier_token as varName

  - name: deleted-malloced-objects
    doc: Finds objects that were obtained with malloc and deleted.
    flows:
      codelingo/review:
        comment: This was obtained with malloc, and should be freed not deleted.
    query: |
      import codelingo/ast/cpp

      cpp.block:
        cpp.assignment_statement(depth = any):
          cpp.lhs:
            cpp.variable:
              cpp.identifier_name:
                identifier_token as varName
          cpp.rhs:
            cpp.function_call:
              cpp.identifier_name:
                identifier_token == "malloc"
        cpp.delete_statement:
          @ review.comment
          cpp.variable:
            cpp.identifier_name:
              identifier_token as varName

  - name: used-after-deletion
    doc: Finds objects used after deletion.
    flows:
      codelingo/review:
        comment: This object has already been deleted.
    query: |
      import codelingo/ast/cpp

      cpp.delete_statement:
        cpp.variable:
          cpp.identifier_name:
            identifier_token as varName
      any_of:
        cpp.element:
          cpp.variable(depth = any):
            cpp.identifier_name:
              identifier_token as varName
        cpp.variable:
          cpp.identifier_name:
            identifier_token as varName

  - name: undeleted-returned-object
    doc: Finds objects new that are not deleted.
    flows:
      codelingo/review:
        comment: This object is neither deleted nor passed to a method that could delete it.
    query: |
      import codelingo/ast/cpp

      cpp.method_declaration(depth = any):
        cpp.assignment_statement(depth = any):
          cpp.lhs:
            cpp.variable:
              type as refType
              regex(/ref.*/, refType)
              cpp.identifier_name:
                identifier_token as varName
        exclude:
          any_of:
            cpp.delete_statement(depth = any):
              cpp.variable:
                cpp.identifier_name:
                  identifier_token as varName
            cpp.method_call:
              cpp.variable:
                cpp.identifier_name:
                  identifier_token as varName
            cpp.function_call:
              cpp.variable:
                cpp.identifier_name:
                  identifier_token as varName